name: "EKS Deployment12"

on:
  workflow_dispatch:
    inputs:
      workspace-name:
        description: 'Name of the Terraform workspace'

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}  
        aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform initialize
      run: terraform init -reconfigure

    - name: Generate workspace name if not provided
      id: generate_workspace_name
      if: ${{ github.event.inputs.workspace-name == '' }}
      run: echo "::set-output name=workspace_name::$(date +%Y%m%d%H%M%S)"

    - name: Check if workspace exists
      id: workspace_list
      run: |
        if terraform workspace list | grep -q "${{ steps.generate_workspace_name.outputs.workspace_name }}"; then
          echo "::error::Workspace already exists."
          exit 1
        else
          echo "::set-output name=workspace_exists::false"
        fi

    - name: Create workspace
      if: steps.workspace_list.outputs.workspace_exists == 'false'
      run: terraform workspace new "${{ steps.generate_workspace_name.outputs.workspace_name }}"

    - name: Select workspace
      run: terraform workspace select "${{ steps.generate_workspace_name.outputs.workspace_name }}"

    - name: Terraform Plan
      run: terraform plan

    - name: Terraform Apply
      run: terraform apply --auto-approve

    - name: Terraform destroy
      run: terraform destroy --auto-approve
